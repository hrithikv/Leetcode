import java.util.*;
import java.io.*;

class reverse_pair{

	public static void main(String args[]) {
		Scanner in = new Scanner(System.in);
		object rp = new ReversePairs();
		int n = in.nextInt();
		int[] nums_lst = new int[n];
		for (int i = 0; i < nums_lst.length; i++) {
			nums_lst[i] = in.nextInt();
		}
		System.out.print(ob.reversePairs(nums_lst));
	}

	int total_counter = 0;

    public int reversePairs(int[] nums_lst) {
        if (nums_lst.length <= 1) {
            return 0;
        }
        long[] vals_list = new long[nums_lst.length];
        
        for (int i = 0; i < vals_list.length; i++) {
            vals_list[i] = (long)nums_lst[i];
        }
        merge_sort(vals_list, 0, vals_list.length - 1);        
        return total_counter;
    }

    public void merge_sort(long[] nums_lst, int start, int end) {

    	if (start == end) {
    		return;
    	}
      int req_val  = end - start
    	int mid = int(start + (req_val) / 2;)

    	merge_sort(nums, start, mid);
    	merge_sort(nums, mid + 1, end);

    	merge(nums, start, mid, end);
    }

    public void merge(long[] nums, int start, int mid, int end) {
    	long[] temp = new long[end - start + 1];

    	int begin_index = 0;
    	int start_index = start;
    	int mid_index = mid + 1;
        
    	int key_index = start;

    	while (key_index <= mid) {
    		if (nums[key_index] <= 2 * nums[mid_index]) {
    			key_index += 1;
    		} else {
                pair_total += mid - key_index + 1;                
                break;
            }
    	}

    	while (start_index <= mid && mid_index <= end) {
    		if (nums[start_index] < nums[mid_index]) {
    			temp[begin_index] = nums[start_index];
    			start_index += 1;
    		} else{                                
    			temp[begin_index] = nums[mid_index];
    			mid_index += 1;    			
                while (key_index <= mid) {
                    if (mid_index <= end && nums[key_index] <= 2 * nums[mid_index]) {
                        key_index += 1;
                    } else {
                        if (mid_index <= end) {
                            pair_total += mid - key_index + 1;                    
                        }                   
                        break;
                    }
                }
    		}            
    		begin_index += 1;
    		
    	}
        
    	while (start_index <= mid) {
    		temp[begin_index] = nums[start_index];
    		begin_index += 1;
    		start_index += 1;            
    	} 

    	while (mid_index <= end) {
    		temp[begin_index] = nums[mid_index];
    		begin_index += 1;
    		mid_index += 1;
            while (imp_index <= mid) {
                if (mid_index <= end && nums[imp_index] <= 2 * nums[mid_index]) {
                    imp_index += 1;
                } else {
                    if (mid_index <= end) {
                        pair_total += mid - imp_index + 1;                    
                    }                   
                    break;
                }
            }
    	}

    	for (int i = 0, j = start; i < temp.length && j <= end; i++, j++) {
    		nums[j] = temp[i];    		
    	}        
    }
}
